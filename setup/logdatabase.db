/*CREATE DATABASE IF NOT EXISTS tuxlog default character set 'UTF8';*/
/*USE tuxlog;*/

/*
* Clear the meta tables! nach insta auf allen Datenbanken weg
*/
DROP PROCEDURE IF EXISTS proc_update_20160618;



/*
* Now we will create the tuxlog user is not exists ...
*/
DROP PROCEDURE IF EXISTS proc_printf;
delimiter //
CREATE PROCEDURE proc_printf(msg TEXT)
BEGIN
	SELECT msg as '---MESSAGE---';
END//
delimiter ;



DROP TABLE IF EXISTS log_tmp_adif_export;
CREATE TABLE log_tmp_adif_export (
    id int NOT NULL AUTO_INCREMENT PRIMARY KEY,
    log_id int, 
    idx int,
    tag char(250), 
    value text
) ENGINE=InnoDB DEFAULT CHARSET=utf8;



DROP PROCEDURE IF EXISTS proc_createtuxloguser;
delimiter //
CREATE PROCEDURE proc_createtuxloguser()
BEGIN
    IF NOT EXISTS (SELECT * from mysql.user where user='tuxlog_admin') THEN
        CREATE USER 'tuxlog_admin'@'localhost' IDENTIFIED BY 'password';
        GRANT ALL ON tuxlog.* TO 'tuxlog_admin'@'localhost';
        GRANT ALL ON mysql.* TO 'tuxlog_admin'@'localhost';
    END IF;
END//
delimiter ;

call proc_createtuxloguser();

/*
* now we will create the user tables!
*/
CREATE TABLE IF NOT EXISTS log_rowids (
    tablename varchar(50) NOT NULL,
    lastrowid INT NOT NULL default '0',
    PRIMARY KEY(tablename)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE IF NOT EXISTS log_ituprefixe (
    itu_prefix varchar(10) NOT NULL,
    description varchar(50) NOT NULL,
    PRIMARY KEY(itu_prefix)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE IF NOT EXISTS log_logbooks (
    id varchar(50) NOT NULL,
    mycall varchar(50) NOT NULL,
    description varchar(50) NOT NULL,
    parent_id varchar(50) NULL,
    deleted smallint NOT NULL default '0',
    PRIMARY KEY(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE IF NOT EXISTS log_settings (
    logbook_id varchar(50) NOT NULL,
    name varchar(250) NOT NULL,
    value varchar(250) NULL,
    PRIMARY KEY(logbook_id,name),
    FOREIGN KEY(logbook_id) REFERENCES log_logbooks(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE IF NOT EXISTS log_modes (
    id varchar(50) NOT NULL,
    description varchar(50) NOT NULL,
    parent varchar(50) NULL,
    PRIMARY KEY (id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE IF NOT EXISTS log_rigs (
    id varchar(50) NOT NULL,
    description varchar(50) NOT NULL,
    hamlib_id int NOT NULL default '0',
    PRIMARY KEY(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE IF NOT EXISTS log_qslshipmentmodes (
    id varchar(50) NOT NULL,
    description varchar(50) NOT NULL,
    PRIMARY KEY(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE IF NOT EXISTS log_logs(
    id int NOT NULL AUTO_INCREMENT,
    logbook_id varchar(50) NOT NULL,
    mode_id varchar(50) NOT NULL,
    rig_id varchar(50) NULL,
    yourcall varchar(50) NOT NULL,
    qslrecv  smallint NOT NULL default '0',
    qslsend smallint NOT NULL default '0',
    power smallint NULL default '0',
    locator varchar(8) NULL,
    comment text NULL,
    viacall varchar(50) NULL,
    logdate_utc date NULL,
    start_utc time NULL,
    end_utc time NULL,
    txrst smallint NULL,
    rxrst smallint NULL,
    mytestnr int NULL default '0',
    yourtestnr int NULL default'0',
    frequency numeric(15,6),
    name varchar(50) NULL,
    qth varchar(50) NULL,
    lognr int NULL default'0',
    itu_prefix varchar(10) NULL,
    dxcc varchar(10) NULL,
    cq varchar(4) NULL,
    itu varchar(4) NULL,
    qsl_shipmentmode varchar(50) NULL,
    dok varchar(10) NULL,
    country varchar(50) NULL,
    web varchar(250) NULL,
    email varchar(250) NULL,
    distance int NULL, 
    source varchar(50) NULL COMMENT 'Importsource',
    PRIMARY KEY(id) ,
    FOREIGN KEY (logbook_id) REFERENCES log_logbooks(id),
    FOREIGN KEY (mode_id) REFERENCES log_modes(id),
    FOREIGN KEY (rig_id) REFERENCES log_rigs(id),
    FOREIGN KEY (qsl_shipmentmode) REFERENCES log_qslshipmentmodes(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


CREATE TABLE IF NOT EXISTS log_importlogs(
    id int NOT NULL AUTO_INCREMENT,
    log_id int NULL COMMENT 'log id',
    external_record text NULL COMMENT 'adif record as string',
    internal_record text NULL COMMENT 'json record as string',
    import_message text NULL COMMENT 'Message from importengine',
    statuscode int NOT NULL default '0' COMMENT '0=new;1=pending;10=ok;20=error',
    FOREIGN KEY (log_id) REFERENCES log_logs(id),
    PRIMARY KEY(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE IF NOT EXISTS log_dxcc(
    id int NOT NULL AUTO_INCREMENT,
    prefix varchar(50) NOT NULL COMMENT 'The callprefix',
    deleted smallint NOT NULL default '0' COMMENT '1=deleted by ARRL',
    entity_name varchar(100) NOT NULL COMMENT 'Name of the country',
    continent varchar(2) NOT NULL COMMENT '2 Character continent shortsign',
    itu_zone smallint NOT NULL COMMENT 'ITU zone',
    cq_zone smallint NOT NULL COMMENT 'CQ zone',
    time_zone smallint NOT NULL COMMENT 'Time Zome in h',
    entity_code smallint NOT NULL COMMENT 'Entity code',
    PRIMARY KEY(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE IF NOT EXISTS meta_dataviews(
    id int NOT NULL AUTO_INCREMENT COMMENT 'Unique ID',
    model_name varchar(250) NOT NULL COMMENT 'Name of Table',
    view_name varchar(250) NOT NULL COMMENT 'name of the view',
    fields text NULL COMMENT 'Fields object (json)',
    id_field_name varchar(250) NOT NULL DEFAULT 'id' COMMENT 'name of the id field',
    where_clause text NULL COMMENT 'WHERE Clause (sql)',
    filter_clause text NULL COMMENT 'additive where clause for search',
    order_by text NULL COMMENT 'order by sql clause',
    page_size int NOT NULL default '5000' COMMENT 'Pagesize',
    open_path text NULL COMMENT 'On activation redirect to this path ($1 will replace with the selected id)',
    PRIMARY KEY(id),
    UNIQUE KEY (model_name, view_name)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


CREATE TABLE IF NOT EXISTS meta_dataforms(
    id int NOT NULL AUTO_INCREMENT COMMENT 'Unique ID',
    model_name varchar(250) NOT NULL COMMENT '',
    form_name varchar(250) NOT NULL COMMENT '',
    datacomponent varchar(250) NOT NULL COMMENT 'vuejs component name',
    PRIMARY KEY(id),
    UNIQUE KEY(model_name, form_name)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE IF NOT EXISTS meta_database_fieldtypes(
    type_name varchar(50) NOT NULL,
    internal_type int NOT NULL default '0' COMMENT '0=String 1=Number 2=Date',
    PRIMARY KEY(type_name)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


CREATE TABLE IF NOT EXISTS  meta_callbook_providers(
    id varchar(50) NOT NULL,
    description varchar(50) NOT NULL,
    classname varchar(250) NOT NULL,
    position int NOT NULL default '100',
    enabled TINYINT NOT NULL default true,
    offline_mode TINYINT NOT NULL default false,
    PRIMARY KEY(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


CREATE TABLE IF NOT EXISTS meta_data_exchange_converters(
    id varchar(50) NOT NULL,
    description varchar(50) NOT NULL,
    classname_in varchar(250) NULL,
    classname_out varchar(250) NULL,
    enabled TINYINT NOT NULL default true,
    PRIMARY KEY(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE IF NOT EXISTS meta_data_exchange_fields(
    converter_id varchar(50) NOT NULL,
    external_fieldname varchar(50) NOT NULL,
    internal_fieldname varchar(50) NOT NULL,
    internal_datatype varchar(50) NOT NULL,
    internal_idx int NOT NULL default '100',
    external_idx int NOT NULL default '100',
    PRIMARY KEY(converter_id,external_fieldname,internal_fieldname,internal_datatype),
    FOREIGN KEY(converter_id) REFERENCES meta_data_exchange_converters(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;




CREATE TABLE IF NOT EXISTS meta_sys_dbversion (
	version varchar(50) NOT NULL,
    description varchar(50) NULL,
	PRIMARY KEY(version)    
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


/*
I will create temp tables
*/
CREATE TABLE IF NOT EXISTS log_tmp_debug(
    id int NOT NULL AUTO_INCREMENT,
    src varchar(500) NULL,
    dbgmsg text NULL,
    PRIMARY KEY(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8; 


/*
I will drop all trigger ...
*/
DROP TRIGGER IF EXISTS log_logs_before_insert;
DROP PROCEDURE IF EXISTS proc_mklogbook;
DROP PROCEDURE IF EXISTS proc_initlogbook;
DROP PROCEDURE IF EXISTS proc_rowid;

/* 
Before you create the Code Blocks (BEGIN ... END), 
you must change the delimiter with delimiter Command!
*/
 
delimiter //

CREATE TRIGGER log_logs_before_insert
BEFORE INSERT ON log_logs FOR EACH ROW
BEGIN
    INSERT INTO log_tmp_debug(src,dbgmsg) VALUES ('yourcall',NEW.yourcall);
    INSERT INTO log_tmp_debug(src,dbgmsg) VALUES ('logdate_utc',NEW.logdate_utc);

    IF NEW.rig_id IS NULL OR NEW.rig_id='' THEN
        SET @default_rig = (SELECT value FROM log_settings 
                            WHERE logbook_id=NEW.logbook_id 
                            AND name='default_rig_id');
        SET NEW.rig_id = @default_rig;
    END IF;

    IF NEW.mode_id IS NULL OR NEW.mode_id='' THEN
        SET @default_mode = (SELECT value FROM log_settings 
                            WHERE logbook_id=NEW.logbook_id 
                            AND name='default_mode_id');
        SET NEW.mode_id = @default_mode;
    END IF;

    IF NEW.qsl_shipmentmode IS NULL OR NEW.qsl_shipmentmode='' THEN
        SET @default_mode = (SELECT value FROM log_settings 
                            WHERE logbook_id=NEW.logbook_id 
                            AND name='default_qsl_shipment_mode_id');
        SET NEW.qsl_shipmentmode = @default_mode;
    END IF;

    IF NEW.logdate_utc IS NULL OR YEAR(NEW.logdate_utc) = 0 THEN
            SET NEW.logdate_utc = UTC_DATE();
    END IF;

    IF (HOUR(NEW.start_utc)=0 
        AND MINUTE(NEW.start_utc)=0 
        AND SECOND(NEW.start_utc)=0) OR NEW.start_utc IS NULL THEN
            SET NEW.start_utc = UTC_TIME();
    END IF;

    IF (HOUR(NEW.end_utc)=0 
        AND MINUTE(NEW.end_utc)=0 
        AND SECOND(NEW.end_utc)=0) OR NEW.end_utc IS NULL THEN
            SET NEW.end_utc = UTC_TIME();
    END IF;


END//

CREATE PROCEDURE proc_mklogbook(lid varchar(50))
BEGIN
    IF NOT EXISTS(SELECT * FROM log_logbooks WHERE id=lid) THEN
        INSERT INTO log_logbooks (id,mycall,description,parent_id) VALUES (
            lid,lid,lid,null);
    END IF;

    UPDATE log_logbooks SET deleted=0 WHERE id=lid;

END;

CREATE PROCEDURE proc_initlogbook(lid varchar(50))
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE setting_name varchar(250);
    DECLARE setting_value varchar(250);
    DECLARE cur_src CURSOR 
        FOR SELECT name,value FROM log_settings where logbook_id='*';
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;


    OPEN cur_src;

    read_loop: LOOP
        FETCH cur_src INTO setting_name, setting_value;

        IF done THEN
            LEAVE read_loop;
        END IF;

        IF NOT EXISTS(SELECT * FROM log_settings WHERE logbook_id=lid AND name=setting_name) THEN
            INSERT INTO log_settings(logbook_id,name,value) VALUES (
                lid,setting_name,setting_value);
        END IF;

    END LOOP;

    CLOSE cur_src;
END//

DROP PROCEDURE IF EXISTS proc_droplogbook;
CREATE PROCEDURE proc_droplogbook(lid varchar(50))
BEGIN
    UPDATE log_logbooks SET deleted=11 WHERE id=lid;
END;


CREATE PROCEDURE proc_rowid(table_name varchar(50), out newid int)
BEGIN
    SET newid=(SELECT lastrowid+1 FROM log_rowids WHERE tablename=table_name);
    
    IF newid IS NULL THEN
        INSERT INTO log_rowids (tablename,lastrowid) VALUES (table_name,1);
        SET newid=1;
    ELSE
        UPDATE log_rowids SET lastrowid=newid WHERE tablename=table_name;
    END IF;
END;

/* ToDo: Return the AUTO_INCREMENT Value! */
DROP PROCEDURE IF EXISTS proc_create_log;
CREATE PROCEDURE proc_create_log(out log_id int
    , in logbook_id varchar(50)
    , in mode_id varchar(50)
    , in rig_id varchar(50)
    , yourcall varchar(50)
    , localtor varchar(8)
    , comment varchar(500)
    , viacall varchar(50)
    , txrst smallint
    , rsrst smallint
    , frequency decimal(15,5)
    , qth varchar(50)
)
BEGIN
    INSERT INTO log_logs (logbook_id) VALUES( logbook_id);
    SET log_id=199;
END//


delimiter ;










DROP PROCEDURE IF EXISTS proc_install_basedata;
delimiter //
CREATE PROCEDURE proc_install_basedata()
BEGIN

	DECLARE CONTINUE HANDLER FOR 1062 SELECT 'ERROR 1062';
 

    IF NOT EXISTS (SELECT * FROM meta_sys_dbversion WHERE version='INSTALL-BASEDATA') THEN
		call proc_printf ('basedata installieren ...!');


/*
I will create the default logbooks ...
*/
call proc_mklogbook('*');
call proc_mklogbook('do9mbs');
call proc_mklogbook('dk9mbs');
call proc_mklogbook('oz/dk9mbs');
call proc_mklogbook('oz/do9mbs');
call proc_mklogbook('dk0ay');

/* Fill the setting table for template logbok */
INSERT INTO log_settings(logbook_id,name,value) VALUES ('*','default_rig_id','ic735');
INSERT INTO log_settings(logbook_id,name,value) VALUES ('*','default_power',100);
INSERT INTO log_settings(logbook_id,name,value) VALUES ('*','default_mode_id', 'ssb');
INSERT INTO log_settings(logbook_id,name,value) VALUES ('*','default_qsl_shipment_mode_id', 'bureau');
INSERT INTO log_settings(logbook_id,name,value) VALUES ('*','callbook_hamqth_username', 'username');
INSERT INTO log_settings(logbook_id,name,value) VALUES ('*','callbook_hamqth_password', 'password');
INSERT INTO log_settings(logbook_id,name,value) VALUES ('*','rest_server_port','8081');

call proc_initlogbook('do9mbs');
call proc_initlogbook('dk9mbs');
call proc_initlogbook('oz/dk9mbs');
call proc_initlogbook('oz/do9mbs');
call proc_initlogbook('dk0ay');

/*
* Database Fields
*/
INSERT INTO meta_database_fieldtypes(type_name,internal_type) VALUES ('varchar',0);
INSERT INTO meta_database_fieldtypes(type_name,internal_type) VALUES ('int',1);
INSERT INTO meta_database_fieldtypes(type_name,internal_type) VALUES ('smallint',1);
INSERT INTO meta_database_fieldtypes(type_name,internal_type) VALUES ('tinyint',1);
INSERT INTO meta_database_fieldtypes(type_name,internal_type) VALUES ('bit',1);
INSERT INTO meta_database_fieldtypes(type_name,internal_type) VALUES ('time',2);
INSERT INTO meta_database_fieldtypes(type_name,internal_type) VALUES ('date',2);

INSERT INTO meta_data_exchange_converters(id,description,classname_in,classname_out) 
VALUES('adif_v2','ADIFV2','','');


INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','ADDRESS','', 'String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','ADIF_VER','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','AGE','','Number');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','A_INDEX','','Number');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','ANT_AZ','','Number');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','ANT_EL','','Number');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','ANT_PATH','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','ARRL_SECT','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','BAND','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','BAND_RX','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype,internal_idx,external_idx) 
VALUES ('adif_v2','CALL','yourcall','String',50,50);

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','CHECK','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','CLASS','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','CNTY','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','COMMENT','comment','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','CONT','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','CONTACTED_OP','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','CONTEST_ID','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','COUNTRY','country','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','CQZ','cq','Number');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','CREDIT_SUBMITTED','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','CREDIT_GRANTED','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','DISTANCE','distance','Number');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','DXCC','dxcc','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','EMAIL','email','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','EQ_CALL','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','EQSL_QSLRDATE','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','EQSL_QSLSDATE','','Date');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','EQSL_QSL_RCVD','','Date');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','EQSL_QSL_SENT','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','FORCE_INIT','','Boolean');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','FREQ','frequency','Number');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','FREQ_RX','','Number');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','GRIDSQUARE','locator','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','GUEST_OP','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','IOTA','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','IOTA_ISLAND_ID','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','ITUZ','','Number');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','K_INDEX','','Number');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','LAT','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','LON','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','LOTW_QSLRDATE','','Date');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','LOTW_QSLSDATE','','Date');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','LOTW_QSL_RCVD','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','LOTW_QSL_SENT','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','MAX_BURSTS','','Number');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','MODE','mode_id','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','MS_SHOWER','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','MY_CITY','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','MY_CNTY','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','MY_COUNTRY','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','MY_CQ_ZONE','','Number');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','MY_GRIDSQUARE','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','MY_IOTA','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','MY_IOTA_ISLAND_ID','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','MY_ITU_ZONE','','Number');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','MY_LAT','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','MY_LON','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','MY_NAME','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','MY_POSTAL_CODE','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','MY_RIG','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','MY_SIG','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','MY_SIG_INFO','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','MY_STATE','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','MY_STREET','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','NAME','name','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','NOTES','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','NR_BURSTS','','Number');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','NR_PINGS','','Number');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','OPERATOR','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','OWNER_CALLSIGN','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','PFX','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','PRECEDENCE','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','PROGRAMID','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','PROGRAMVERSION','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','PROP_MODE','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','PUBLIC_KEY','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','QSLMSG','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','QSLRDATE','','Date');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','QSLSDATE','','Date');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','QSL_RCVD','qslrecv','Boolean');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','QSL_RCVD_VIA','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','QSL_SENT','qslsend','Boolean');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','QSL_SENT_VIA','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','QSL_VIA','viacall','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','QSO_COMPLETE','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','QSO_DATE','logdate_utc','Date');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','QSO_DATE_OFF','','Date');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','QSO_RANDOM','','Boolean');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','QTH','qth','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','RIG','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','RST_RCVD','rxrst','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','RST_SENT','txrst','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','RX_PWR','','Number');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','SAT_MODE','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','SAT_NAME','', 'String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','SFI','','Number');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','SIG','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','SIG_INFO','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','SRX','','Number');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','SRX_STRING','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','STATE','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','STATION_CALLSIGN','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','STX','','Number');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','STX_STRING','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','SWL','','Boolean');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','TEN_TEN','','Number');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','TIME_OFF','end_utc','Time');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','TIME_ON','start_utc','Time');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','TX_PWR','','Number');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','VE_PROV','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','USERDEFn','','String');

INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','WEB','web','String');

/*
* xlog fields 
*/
INSERT INTO meta_data_exchange_fields(converter_id,external_fieldname,internal_fieldname,internal_datatype) 
VALUES ('adif_v2','via','viacall','String');

/* --- */


INSERT log_ituprefixe(itu_prefix,description) VALUES ('dk','dl');
INSERT log_ituprefixe(itu_prefix,description) VALUES ('dl','dl');
INSERT log_ituprefixe(itu_prefix,description) VALUES ('dg','dl');
INSERT log_ituprefixe(itu_prefix,description) VALUES ('do','dl');


INSERT INTO log_rigs (id,description,hamlib_id) VALUES ('ft817','FT817',120);
INSERT INTO log_rigs (id,description,hamlib_id) VALUES ('ic735','ICOM 735',319);


INSERT INTO log_modes (id,description) VALUES ('AM','AM');
INSERT INTO log_modes (id,description) VALUES ('AMTORFEC','AMTORFEC');
INSERT INTO log_modes (id,description) VALUES ('ASCI','ASCI');
INSERT INTO log_modes (id,description) VALUES ('ATV','ATV');
INSERT INTO log_modes (id,description) VALUES ('CHIP64','CHIP64');
INSERT INTO log_modes (id,description) VALUES ('CHIP128','CHIP128');
INSERT INTO log_modes (id,description) VALUES ('CLO','CLO');
INSERT INTO log_modes (id,description) VALUES ('CONTESTI','CONTESTI');
INSERT INTO log_modes (id,description) VALUES ('CW','CW');
INSERT INTO log_modes (id,description) VALUES ('DSTAR','DSTAR');
INSERT INTO log_modes (id,description) VALUES ('DOMINO','DOMINO');
INSERT INTO log_modes (id,description) VALUES ('DOMINOF','DOMINOF');
INSERT INTO log_modes (id,description) VALUES ('FAX','FAX');
INSERT INTO log_modes (id,description) VALUES ('FM','FM');
INSERT INTO log_modes (id,description) VALUES ('FMHELL','FMHELL');
INSERT INTO log_modes (id,description) VALUES ('FSK31','FSK31');
INSERT INTO log_modes (id,description) VALUES ('FSK441','FSK41');
INSERT INTO log_modes (id,description) VALUES ('GTOR','GTOR');
INSERT INTO log_modes (id,description) VALUES ('HELL','HELL');
INSERT INTO log_modes (id,description) VALUES ('HELL80','HELL80');
INSERT INTO log_modes (id,description) VALUES ('HFSK','HFSK');
INSERT INTO log_modes (id,description) VALUES ('JT44','JT44');
INSERT INTO log_modes (id,description) VALUES ('JT4A','JT4A');
INSERT INTO log_modes (id,description) VALUES ('JT4B','JT4B');
INSERT INTO log_modes (id,description) VALUES ('JT4C','JT4C');
INSERT INTO log_modes (id,description) VALUES ('JT4D','JT4D');
INSERT INTO log_modes (id,description) VALUES ('JT4E','JT4E');
INSERT INTO log_modes (id,description) VALUES ('JT4F','JT4F');
INSERT INTO log_modes (id,description) VALUES ('JT4G','JT4G');
INSERT INTO log_modes (id,description) VALUES ('JT65','JT65');
INSERT INTO log_modes (id,description) VALUES ('JT65A','JT65A');
INSERT INTO log_modes (id,description) VALUES ('JT65B','JT65B');
INSERT INTO log_modes (id,description) VALUES ('JT65C','JT65C');
INSERT INTO log_modes (id,description) VALUES ('JT6M','JT6M');
INSERT INTO log_modes (id,description) VALUES ('MFSK8','MFSK8');
INSERT INTO log_modes (id,description) VALUES ('MFSK16','MFSK16');
INSERT INTO log_modes (id,description) VALUES ('MT63','MT63');
INSERT INTO log_modes (id,description) VALUES ('OLIVIA','OLIVIA');
INSERT INTO log_modes (id,description) VALUES ('PAC','PAC');
INSERT INTO log_modes (id,description) VALUES ('PAC2','PAC2');
INSERT INTO log_modes (id,description) VALUES ('PAC3','PAC3');
INSERT INTO log_modes (id,description) VALUES ('PAX','PAX');
INSERT INTO log_modes (id,description) VALUES ('PAX2','PAX2');
INSERT INTO log_modes (id,description) VALUES ('PCW','PCW');
INSERT INTO log_modes (id,description) VALUES ('PKT','PKT');
INSERT INTO log_modes (id,description) VALUES ('PSK10','PSK10');
INSERT INTO log_modes (id,description) VALUES ('PSK31','PSK31');
INSERT INTO log_modes (id,description) VALUES ('PSK63','PSK63');
INSERT INTO log_modes (id,description) VALUES ('PSK63F','PSK63F');
INSERT INTO log_modes (id,description) VALUES ('PSK125','PSK125');
INSERT INTO log_modes (id,description) VALUES ('PSKAM10','PSKAM10');
INSERT INTO log_modes (id,description) VALUES ('PSKAM31','PSKAM31');
INSERT INTO log_modes (id,description) VALUES ('PSKAM50','PSKAM50');
INSERT INTO log_modes (id,description) VALUES ('PSKFEC31','PSKFEC31');
INSERT INTO log_modes (id,description) VALUES ('PSKHELL','PSKHELL');
INSERT INTO log_modes (id,description) VALUES ('Q15','Q15');
INSERT INTO log_modes (id,description) VALUES ('QPSK31','QPSK31');
INSERT INTO log_modes (id,description) VALUES ('QPSK63','QPSK63');
INSERT INTO log_modes (id,description) VALUES ('QPSK125','QPSK125');
INSERT INTO log_modes (id,description) VALUES ('ROS','ROS');
INSERT INTO log_modes (id,description) VALUES ('RTTY','RTTY');
INSERT INTO log_modes (id,description) VALUES ('RTTYM','RTTYM');
INSERT INTO log_modes (id,description) VALUES ('SSB','SSB');
INSERT INTO log_modes (id,description) VALUES ('SSTV','SSTV');
INSERT INTO log_modes (id,description) VALUES ('THRB','THRB');
INSERT INTO log_modes (id,description) VALUES ('THOR','THOR');
INSERT INTO log_modes (id,description) VALUES ('THRBX','THRBX');
INSERT INTO log_modes (id,description) VALUES ('TOR','TOR');
INSERT INTO log_modes (id,description) VALUES ('VOI','VOI');
INSERT INTO log_modes (id,description) VALUES ('WINMOR','WINMOR');
INSERT INTO log_modes (id,description) VALUES ('WSPR','WSPR');

INSERT INTO log_qslshipmentmodes (id,description) VALUES ('no', 'No QSL card');
INSERT INTO log_qslshipmentmodes (id,description) VALUES ('bureau', 'bureau');
INSERT INTO log_qslshipmentmodes (id,description) VALUES ('eqsl', 'eQsl');
INSERT INTO log_qslshipmentmodes (id,description) VALUES ('lotw', 'LotW');
INSERT INTO log_qslshipmentmodes (id,description) VALUES ('direct', 'Direkt');

INSERT INTO meta_sys_dbversion(version,description) VALUES ('INSTALL-BASEDATA','INSTALL-BASEDATA');

	END IF;
END//
delimiter ;
call proc_install_basedata();



/*
DROP PROCEDURE IF EXISTS proc_install_callbookprovider;

delimiter //
CREATE PROCEDURE proc_install_callbookprovider()
BEGIN
    IF NOT EXISTS (SELECT * FROM meta_callbook_providers) THEN
		call proc_printf ('meta_callbook_provider installieren ...!');



/*
* DX Cluster
*/
CREATE TABLE IF NOT EXISTS log_dxcluster_spots(
    id int NOT NULL AUTO_INCREMENT,
    spot varchar(250) NOT NULL,
    date timestamp default CURRENT_TIMESTAMP NOT NULL,
    PRIMARY KEY(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE IF NOT EXISTS log_dxcluster(
    id int NOT NULL,
    cluster_url varchar(250) NOT NULL,
    port int NOT NULL,
    position smallint NOT NULL default '100',
    PRIMARY KEY(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE IF NOT EXISTS log_dxcluster_loginscript(
    id int NOT NULL,
    dxcluster_id int NOT NULL,
    position smallint NOT NULL default '10',
    prompt varchar(250) NOT NULL,
    send varchar(50) NOT NULL,
    PRIMARY KEY(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*
DX Cluster eintragen
*/
DROP PROCEDURE IF EXISTS proc_install_dxcluster;
delimiter //
CREATE PROCEDURE proc_install_dxcluster()
BEGIN

	DECLARE CONTINUE HANDLER FOR 1062 SELECT 'ERROR 1062';
 

    IF NOT EXISTS (SELECT * FROM meta_sys_dbversion WHERE version='INSTALL-DXCLUSTER_V1.0.0') THEN
		call proc_printf ('DXCluster installieren ...!');

INSERT INTO log_dxcluster(id,cluster_url,port,position) VALUES (1,'db0pra.ampr.org',41112,0);
INSERT INTO log_dxcluster(id,cluster_url,port,position) VALUES (2,'dl4rck.ham-radio-op.net',8000,10);

INSERT INTO log_dxcluster_loginscript(id,dxcluster_id,position,prompt,send) VALUES (1,1,10,'login: ','dk9mbs');
INSERT INTO log_dxcluster_loginscript(id,dxcluster_id,position,prompt,send) VALUES (2,1,20,'DK9MBS','');

INSERT INTO log_dxcluster_loginscript(id,dxcluster_id,position,prompt,send) VALUES (3,2,10,'Please enter your call:','dk9mbs');

INSERT INTO meta_sys_dbversion(version,description) VALUES ('INSTALL-DXCLUSTER_V1.0.0','INSTALL-DXCLUSTER_V1.0.0');

	END IF;
END//
delimiter ;
call proc_install_dxcluster();












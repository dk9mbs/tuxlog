<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">

  <title>DK9MBS tuxlog</title>
  <meta name="description" content="DK9MBS tuxlog">
  <meta name="author" content="dk9mbs">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <!--<link rel="stylesheet" href="css/styles.css?v=1.0">-->
  <script src="/js/websocket.js"></script>
</head>

<body>

  <script src="https://cdn.jsdelivr.net/npm/vue"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.js"></script>

  <!-- 
    bootstrap-vue 
    https://bootstrap-vue.js.org/docs/reference/starter-templates/
  -->

  <link
      type="text/css"
      rel="stylesheet"
      href="https://unpkg.com/bootstrap/dist/css/bootstrap.min.css"
    />
    <link
      type="text/css"
      rel="stylesheet"
      href="https://unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.css"
    />
  <script src="https://unpkg.com/babel-polyfill@latest/dist/polyfill.min.js"></script>
  <script src="https://unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.js"></script>
  <!-- end boostrap-vue -->

<div class="parent" id="app">
  
  <b-navbar toggleable="lg" type="dark" variant="dark">
    <b-navbar-brand href="#">tuxlog</b-navbar-brand>

    <b-navbar-toggle target="nav-collapse"></b-navbar-toggle>

    <b-collapse id="nav-collapse" is-nav>
      <b-navbar-nav>
        <b-nav-item href="#">dk9mbs.de</b-nav-item>
      </b-navbar-nav>

      <b-navbar-nav class="ml-auto">

        <b-nav-item-dropdown text="Lang" right>
          <b-dropdown-item href="#">DE</b-dropdown-item>
        </b-nav-item-dropdown>

        <b-nav-item-dropdown right>
          <template slot="button-content"><em>User</em></template>
          <b-dropdown-item href="#">Sign Out</b-dropdown-item>
        </b-nav-item-dropdown>
      </b-navbar-nav>
    </b-collapse>
  </b-navbar>


  <div>
  </div>

  <!--
  <b-tabs style="float:right;">
      <b-tab title="Logentry" active>
-->


  <div>
    <b-container fluid>
      <b-row class="my-1" key="type">
        <b-col>
          
          <b-button variant="outline-secondary" v-b-toggle.collapse-rigctl size="sm" style="margin-top:10px;margin-bottom:5px;">Rig control</b-button>
          <b-collapse id="collapse-rigctl" visible="true" class="mt-2">
            <b-card>
            <tuxlog-rigctl
              rig="ic735">
            </tuxlog-rigctl>
            </b-card>
          </b-collapse>

          <div>
          <tuxlog-call-history 
          style="padding-top:5px;"
          v-bind:items="history" 
          v-bind:fields="historyfields" 
          v-bind:id="history" 
          v-bind:pending="appstatus.loadhistory"
          @onclick_row="onclick_history">
          </tuxlog-call-history>
        </div>

          <b-button variant="outline-secondary" v-b-toggle.collapse-1 size="sm" stye="margin-bottom: 5px;">Call history filter</b-button>
          <b-collapse id="collapse-1" class="mt-2">
              <b-card>
              <tuxlog-call-history-filter 
                v-model="callhistory"
              >
              </tuxlog-call-history-filter>
            </b-card>
          </b-collapse>
        </b-col>

  
        <b-col>
          <b-card>
            <div v-if="appstatus.processdatadetail===true" class="d-flex justify-content-center mb-3">
                <b-spinner label="Loading..."></b-spinner>
            </div>
            <b-container fluid v-if="appstatus.processdatadetail===false">
            <b-row class="my-1" key="type">
              <b-col>
                <tuxlog-option id="lookbook" v-bind:values="logbooks" v-if="logentry.logbook" v-model="logentry.logbook.id" label="My call"></tuxlog-option>
              </b-col>
              <b-col>
                <tuxlog-option id="mode" v-bind:values="modes" v-if="logentry.mode" v-model="logentry.mode.id" label="Mode"></tuxlog-option>
              </b-col>
              <b-col>
                <tuxlog-option id="rig" v-bind:values="rigs" v-if="logentry.rig" v-model="logentry.rig.id" label="Rig"></tuxlog-option>
              </b-col>
            </b-row>
      
            <b-row class="my-1" key="type">
              <b-col>
                <tuxlog-input id="power" type="number" v-model="logentry.power" label="Pwr"></tuxlog-input>
              </b-col>
              <b-col>
                  <tuxlog-input id="frequency" type="number" v-model="logentry.frequency" label="QRG"></tuxlog-input>
                </b-col>
              <b-col>
                <tuxlog-input id="logdata_utc" type="date" v-model="logentry.logdate_utc" label="Date"></tuxlog-input>
            </b-col>
            <b-col>
                <tuxlog-input id="start_utc" type="text" v-model="logentry.start_utc" label="UTC"></tuxlog-input>
            </b-col>
          </b-row>
      
          <b-row class="my-1" key="type">
              <b-col>
                  <tuxlog-input id="yourcall" type="text" @onchange_value="yourcall_onchange" v-model="logentry.yourcall" label="Call"></tuxlog-input>
                </b-col>
              <b-col>
                <tuxlog-input id="rxrst" type="number" v-model="logentry.rxrst" label="RX RST"></tuxlog-input>
              </b-col>
            <b-col>
                <tuxlog-input id="txrst" type="number" v-model="logentry.txrst" label="TX RST"></tuxlog-input>
              </b-col>
          </b-row>
      
          <b-row class="my-1" key="type">
              <b-col>
                  <tuxlog-input id="locator" type="text" v-model="logentry.locator" label="LOC"></tuxlog-input>
              </b-col>
              <b-col>
                <tuxlog-input id="qth" type="text" v-model="logentry.qth" label="QTH"></tuxlog-input>
            </b-col>
            <b-col>
                  <tuxlog-input id="country" type="text" v-model="logentry.country" label="Country"></tuxlog-input>
            </b-col>
          </b-row>
      
          <b-row class="my-1" key="type">
            <b-col>
              <tuxlog-input id="name" type="text" v-model="logentry.name" label="Name"></tuxlog-input>
            </b-col>
            <b-col>
              <tuxlog-input id="comment" type="text" v-model="logentry.comment" label="Comment"></tuxlog-input>
            </b-col>
          </b-row>                
      
          <b-row class="my-1" key="type">
              <b-col>
                  <tuxlog-input id="itu_prefix" type="text" v-model="logentry.itu_prefix" label="Prefix"></tuxlog-input>
                </b-col>
              <b-col>
                  <tuxlog-input id="dxcc" type="text" v-model="logentry.dxcc" label="DXCC"></tuxlog-input>
                </b-col>
              <b-col>
                  <tuxlog-input id="cq" type="text" v-model="logentry.cq" label="CQ"></tuxlog-input>
                </b-col>
              <b-col>
                  <tuxlog-input id="itu" type="text" v-model="logentry.itu" label="ITU"></tuxlog-input>
                </b-col>
              <b-col>
                  <tuxlog-input id="dok" type="text" v-model="logentry.dok" label="DOK"></tuxlog-input>
                </b-col>
            </b-row>
      
      
            <b-row class="my-1" key="type">
              <b-col>
                <tuxlog-input id="viacall" type="text" v-model="logentry.viacall" label="via"></tuxlog-input>
              </b-col>
              <b-col>
                <tuxlog-option id="qsl_shipmentmode" v-bind:values="qslshipmentmodes" v-if="logentry.qsl_shipmentmode" v-model="logentry.qsl_shipmentmode.id" label="Shipment"></tuxlog-option>
              </b-col>
          </b-row>
      
      
          <b-row class="my-1" key="type" style="width: 50%;">
              <b-col>
                  <tuxlog-checkbox id="qslsend" v-model="logentry.qslsend" label="Send"></tuxlog-checkbox>
                </b-col>
              <b-col>
                  <tuxlog-checkbox id="qslrecv" v-model="logentry.qslrecv" label="Recv"></tuxlog-checkbox>
                </b-col>
          </b-row>                  
      
          <b-row class="my-1" key="type" style="width: 50%;">
            <b-col>
              <b-button v-on:click="clearForm()" size="sm">New</b-button>
              <b-button v-on:click="save()" size="sm" v-if="this.appstatus.processdatadetail===false">Save and new</b-button>
      
              </b-col>
            </b-row>        
          </b-container></b-card>

  </b-col>
</b-row>
</b-container>


  </div>
</div>


<script type="module">
  import Vue from 'https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.esm.browser.js'
  //import BootstrapVue from 'https://unpkg.com/bootstrap-vue@2.0.0-rc.28/dist/bootstrap-vue.esm.js'
  //Vue.use(BootstrapVue)
  var test= new Vue({});
</script>

<script>

Vue.component('tuxlog-input', {
    props: ["label","value", "type", "id", "readonly"],
    template: '<div style="margin-top:0px;">\
      <b-form-group\
        id="fieldset-horizontal"\
        label-cols-sm="0"\
        label-cols-lg="0"\
        v-bind:description="label"\
        v-bind:lab="label"\
        label-for="input-horizontal"\
      >\
    <b-form-input v-bind:readonly="readonly" v-bind:id="id" v-bind:type="type" v-model="value" size="sm" @input="handleInput" @change="onchange_value"></b-form-input>\
    </b-form-group>\
    </div>',
  
    methods: {
      onchange_value(e) {
        this.$emit('onchange_value', e)
      },
      handleInput (e) {
        this.$emit('input', this.value)
      }
    }
  });
  
  
  Vue.component('tuxlog-option', {
    props: ["values", "value", "label", "id", "readonly"],
    template: '<div><b-form-group\
        id="fieldset-horizontal"\
        label-cols-sm="0"\
        label-cols-lg="0"\
        v-bind:description="label"\
        v-bind:lab="label"\
        label-for="input-horizontal"\
      >\
  <b-form-select v-bind:disabled="readonly" v-bind:id="id" v-model="value" class="mb-1" size="sm" @input="handleInput" @change="onchange_value">\
  <option v-for="n in values" :value="n.id">{% raw %}{{ n.description }}{% endraw %}</option>\
  </b-form-select>\
  </b-form-group>\
  </div>',
  
  methods: {
      onchange_value(e) {
        this.$emit('onchange_value', e)
      },
      handleInput (e) {
        this.$emit('input', this.value)
      }
    }
  });
  
  Vue.component('tuxlog-checkbox', {
    props: ["value", "label", "id"],
    template: '<div><label for="logbook_id" size="sm">{% raw %}{{ label }}{% endraw %}\
    <b-form-checkbox v-bind:id="id" unchecked-value="0" value="1" v-model="value" size="sm" @input="handleInput"></b-form-checkbox>\
  </label></div>',
  
  methods: {
      handleInput (e) {
        this.$emit('input', e)
      }
    }
  });
  
  Vue.component('tuxlog-call-history', {
    props: ["fields", "items", "id", "pending"],
    template: '<div>\
    <div  v-if="pending===true" class="d-flex justify-content-center mb-3">\
            <b-spinner label="Loading..."></b-spinner>\
        </div>\
        <b-table v-if="pending===false"\
          striped hover small\
          bordered="true" v-bind:items="items" v-bind:fields="fields"\ @row-clicked="handleClick">\
        </b-table></b-card>\
  </div>',
  
  methods: {
      handleClick (record, index) {
        this.$emit('onclick_row', record, index)
      }
    }
  });
  
  Vue.component('tuxlog-call-history-filter', {
    props: ["value"],
    template: '<div style="margin-top:0px;">\
    <b-form-input placeholder="Call" size="sm" v-model="search.call" @input="handleInput($event, \'call\')" ></b-form-input>\
    <b-button v-on:click="resetFilter()" size="sm" style="margin-top: 10px;">Reset</b-button>\
    </div>',
    data() { return{
      "search": {"call": null, "comment": null}
    }},
    methods: {
      handleInput (e, field) {
        this.search[field]=e;
        this.execute();
      },
      resetFilter() {
        this.value.listuri=null;
        this.search.call=null;
      },
      execute() {
      var orderby="logdate_utc desc, start_utc desc";
      var where="";
      var pagesize=10;
  
      if (this.search['call'] != null) {
        where=where+"yourcall like '" + this.search['call'] + "%%'";
      }
  
      var paras='order='+encodeURI(orderby)+"&"+'where='+encodeURI(where);
      this.value.listuri=paras;
      this.$emit('input', this.value)
  
      }
    },
  });
  
  Vue.component('tuxlog-rigctl', {
    data() {
        return {
          freq: 0,
          error: null,
          error_text: "",
          timer_id: 0,
          timer_interval: 1000
      }
    },
    props: ["qrg", "mode", "rig"],
    template: '<div>\
      <!--<b-form-input placeholder="QRG" size="sm" v-model="freq" readonly="true"></b-form-input>-->\
      <tuxlog-input id="qrg" type="number" v-model="freq" label="QRG" readonly="true"></tuxlog-input>\
      <div style="background-color:lightgrey;padding-top: 11px; padding-bottom:10px;padding-left:5px;">\
      <b-button pill variant="success" style="margin-bottom: 0px" v-on:click="startInterval()" v-bind:disabled="timer_id != 0" size="sm">></b-button>\
      <b-button pill variant="danger" style="margin-bottom: 0px" v-on:click="stopInterval()" v-bind:disabled="timer_id === 0" size="sm">||</b-button>\
      <span style="background-color: red; text-align: left; padding:10px;" v-if="error != null">{% raw %}{{ error_text }}{%endraw %}</span>\
      <span style="background-color: LightGreen ; text-align: left; padding:10px;" v-if="error === null">{% raw %}{{ rig }}{%endraw %} successfully connected</span>\
      <span style="background-color: DarkOrange; text-align: left; padding:10px;" v-if="timer_id === 0">{% raw %}{{ rig }}{%endraw %} connection stopped</span>\
      </div>\
  </div>',
  mounted() {
    this.startInterval();
  },
  methods: {
        handleInput (event, field) {
          this.$emit('ongetrigdata', field, event)
        },
        stopInterval: function () {
          clearInterval(this.timer_id);
          this.timer_id=0;
        },
        startInterval: function() {
          // use arrow function
          intervalId=setInterval(() => {
            this.clearError();
            axios.get('/api/v1.0/rigctl/'+this.rig+'/f').then(response => {
              this.freq=response.data['response']['Frequency']
              this.error=null
            }).catch( response => {
              console.log(response.response.data['error']);
              this.error= response.response.data;
              this.error_text= response.response.data['error'];
              this.freq=0;
              this.stopInterval();
            })
        },this.timer_interval )
        this.timer_id=intervalId;
        return intervalId;
      },
      clearError: function() {
        this.error=null;
        this.error_text="";
      }
    }
  });

var vue=new Vue({
    el: '#app',
    data () {
      return {
        appstatus: {"processdatadetail": false, "loadhistory": false},
        alert: {message: null, type: 'warning',dismissSecs: 10,dismissCountDown: 0,showDismissibleAlert: false},
        logentry: {},
        rigs: [],
        modes: [],
        logbooks: [],
        qslshipmentmodes: [],
        alert: {message: null, type: 'warning',dismissSecs: 10,dismissCountDown: 0,showDismissibleAlert: false}, 
        auth: {username: 'guest', password:null},
        history: [],
        historyfields: ["id", "yourcall", "start_utc","logdate_utc","frequency","rxrst"],
        callhistory: {"listuri": null, "defaultlisturl": "order=id desc&pagesize=10"}
      }
    },
    mounted () {
      var recordId=0;
      para= new URLSearchParams(window.location.search);
      if(para.has('recordid')) recordId=para.get('recordid');
      this.initEntry(recordId);
  
      axios.get('/api/v1.0/tuxlog/LogLogbooks').then( (response) => {
        this.logbooks=response.data;
      }
      ).catch( (response) => { alert('Error loading lookbooks') } )
  
      axios.get('/api/v1.0/tuxlog/LogRigs').then( (response) => {
        this.rigs=response.data;
      }
      ).catch( (response) => { alert('Error loading rigs') } )
  
      axios.get('/api/v1.0/tuxlog/LogModes').then( (response) => {
        this.modes=response.data;
      }
      ).catch( (response) => { alert('Error loading modes') } )
  
      axios.get('/api/v1.0/tuxlog/LogQslshipmentmodes').then( (response) => {
        this.qslshipmentmodes=response.data;
      }
      ).catch( (response) => { alert('Error loading qslshipmentmodes') } )
      
      this.loadHistory();
    },
    watch: {
      'callhistory.listuri': function (newValue) {
        debugger;
        this.appstatus.loadHistory=true;
  
        if(newValue==null) {
          newValue=this.callhistory.defaultlisturl;
        }
  
        axios.get('/api/v1.0/tuxlog/LogLogs?'+newValue).then( (response) => {
        this.history=response.data;
        this.appstatus.loadhistory=false;
        }).catch((response)=> {alert('Fehler')})
      }
    },
     filters:{
        getconfigkey: function(value,key){
            if(value==null) return null;
            return value[key];
          }
      },
    methods: {
      onclick_history: function(record, index) {
        console.log('selected record => '+record);
        this.initEntry(record.id);
      },
      loadHistory: function(callsign="") {
          var paras = "";
          if (this.callhistory.listuri==null) {
            paras=this.callhistory.defaultlisturl;
          } else {
            paras=this.callhistory.listuri;
          }
          
          axios.get('/api/v1.0/tuxlog/LogLogs?'+paras).then( (response) => {
          this.history=response.data;
          this.appstatus.loadhistory=false;
        }).catch((response)=> {alert('Fehler')})
      },
       makeToast(append = false, text) {
          this.toastCount++
          this.$bvToast.toast(text, {
            title: 'tuxlog',
            autoHideDelay: 5000,
            appendToast: append
          })
        },
      yourcall_onchange: function(event) {
        this.makeToast(true, 'Reading from callbook...')
        this.loadHistory(event);
        axios.get('/api/v1.0/callbook/hamdb/'+event).then((response)=>{
          this.logentry.name=response.data.haminfo.name
          this.logentry.country=response.data.haminfo.country
          this.logentry.qth=response.data.haminfo.qth
          this.logentry.locator=response.data.haminfo.locator
          this.$forceUpdate();
      }).catch((response) => {
        this.logentry.name=""
        this.logentry.country=""
        this.logentry.qth=""
        this.logentry.locator=""
        this.$forceUpdate();
        this.showAlert('Error loading haminfo => '+response, "warning")
      })
      },
      initEntry: function (id) {
        this.appstatus.processdatadetail=true;
        if (id==0) {
          this.clearForm();
        } else {axios.get('/api/v1.0/tuxlog/LogLogs/'+id).then( (response) => {
            this.logentry=response.data;
            console.log(this.logentry);
            this.appstatus.processdatadetail=false;
          }).catch( (response) => { alert('Fehler'); this.clearForm(); } )
        }
      },
      clearForm: function() {
        now = new Date();
        utcTime = now.getUTCHours()+":"+now.getUTCMinutes();
        this.loadHistory();
        this.appstatus.processdatadetail=false;
        
        this.logentry={"rig": {"id": "ic735"}, "mode": {"id": "SSTV"}, 
        "logbook": {"id":"dk9mbs"}, "qsl_shipmentmode": {"id":"bureau"}, "logdate_utc": new Date().toISOString().slice(0,10), 
        "start_utc": utcTime, "qslsend":0, "qslrecv":0};
      },
      save: function() {
        axios.post('/api/v1.0/tuxlog/LogLogs', this.logentry).then((response) => {
          console.log(this.logentry);
          this.clearForm();
          this.makeToast(true, 'New entry saved!');
        }).catch((response)=>{alert('Fehler'); this.appstatus.processdatadetail=false; })
      },
      countDownChanged: function(dismissCountDown) {
        this.alert.dismissCountDown = dismissCountDown
      },
      showAlert: function(message, type='warning') {
        this.alert.message=message;
        this.alert.type=type;
        this.alert.dismissCountDown = this.alert.dismissSecs;
      }
  
    }
  })
</script>

<script>
/*listener=new ServerMessageListener();

foo=new class extends BaseListener { execute(){}; }
foo.setVue(vue);

listener.addListener(foo);
listener.addListener( new class { execute() {console.log('Log aus dem Plugin')} }    );
listener.addListener( new class { execute() {  } }    );
listener.connect();

listener.execListener();*/
</script>

</body>
</html>

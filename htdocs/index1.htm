<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">

  <title>DK9MBS tuxlog</title>
  <meta name="description" content="DK9MBS tuxlog">
  <meta name="author" content="dk9mbs">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <!--<link rel="stylesheet" href="css/styles.css?v=1.0">-->
  <script src="/js/index.js"></script>
</head>

<body>

  <!--<script src="js/scripts.js"></script>-->
  <script src="https://cdn.jsdelivr.net/npm/vue"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.js"></script>

  <!-- 
    bootstrap-vue 
    https://bootstrap-vue.js.org/docs/reference/starter-templates/
  -->

  <link
      type="text/css"
      rel="stylesheet"
      href="https://unpkg.com/bootstrap/dist/css/bootstrap.min.css"
    />
    <link
      type="text/css"
      rel="stylesheet"
      href="https://unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.css"
    />
  <script src="https://unpkg.com/babel-polyfill@latest/dist/polyfill.min.js"></script>
  <script src="https://unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.js"></script>
  <!-- end boostrap-vue -->

<div class="parent" id="app">
  
  <b-navbar toggleable="lg" type="dark" variant="dark">
    <b-navbar-brand href="#">DK9MBS</b-navbar-brand>

    <b-navbar-toggle target="nav-collapse"></b-navbar-toggle>

    <b-collapse id="nav-collapse" is-nav>
      <b-navbar-nav>
        <b-nav-item href="#">dk9mbs.de</b-nav-item>
      </b-navbar-nav>

      <b-navbar-nav class="ml-auto">

        <b-nav-item-dropdown text="Lang" right>
          <b-dropdown-item href="#">DE</b-dropdown-item>
        </b-nav-item-dropdown>

        <b-nav-item-dropdown right>
          <template slot="button-content"><em>User</em></template>
          <b-dropdown-item href="#">Sign Out</b-dropdown-item>
        </b-nav-item-dropdown>
      </b-navbar-nav>
    </b-collapse>
  </b-navbar>


  <div>
  </div>

  <!--
  <b-tabs style="float:right;">
      <b-tab title="Logentry" active>
-->


  <div>
    <b-container fluid>
      <b-row class="my-1" key="type">
        <b-col>
          <b-table 
            striped hover small
            bordered="true" 
            v-bind:items="history" 
            v-bind:fields="historyfields" 
            @row-clicked="onclick_history">
          </b-table></b-card>
        </b-col>

        <b-col>

    
          
          <b-card>
            <div v-if="loaddata===true"><img src="https://pressengers.de/wp-content/uploads/2014/09/avatar-black.gif" style="width: 100px;"></div>
            <b-container fluid v-if="loaddata===false">
            <b-row class="my-1" key="type">
              <b-col>
                <tuxlog-option id="lookbook" v-bind:values="logbooks" v-if="logentry.logbook" v-model="logentry.logbook.id" label="My call"></tuxlog-option>
              </b-col>
              <b-col>
                <tuxlog-option id="mode" v-bind:values="modes" v-if="logentry.mode" v-model="logentry.mode.id" label="Mode"></tuxlog-option>
              </b-col>
              <b-col>
                <tuxlog-option id="rig" v-bind:values="rigs" v-if="logentry.rig" v-model="logentry.rig.id" label="Rig"></tuxlog-option>
              </b-col>
            </b-row>
      
            <b-row class="my-1" key="type">
              <b-col>
                <tuxlog-input id="power" type="number" v-model="logentry.power" label="Pwr"></tuxlog-input>
              </b-col>
              <b-col>
                  <tuxlog-input id="frequency" type="number" v-model="logentry.frequency" label="QRG"></tuxlog-input>
                </b-col>
              <b-col>
                <tuxlog-input id="logdata_utc" type="date" v-model="logentry.logdate_utc" label="Date"></tuxlog-input>
            </b-col>
            <b-col>
                <tuxlog-input id="start_utc" type="text" v-model="logentry.start_utc" label="UTC"></tuxlog-input>
            </b-col>
          </b-row>
      
          <b-row class="my-1" key="type">
              <b-col>
                  <tuxlog-input id="yourcall" type="text" @onchange_value="yourcall_onchange" v-model="logentry.yourcall" label="Call"></tuxlog-input>
                </b-col>
              <b-col>
                <tuxlog-input id="rxrst" type="number" v-model="logentry.rxrst" label="RX RST"></tuxlog-input>
              </b-col>
            <b-col>
                <tuxlog-input id="txrst" type="number" v-model="logentry.txrst" label="TX RST"></tuxlog-input>
              </b-col>
          </b-row>
      
          <b-row class="my-1" key="type">
              <b-col>
                  <tuxlog-input id="locator" type="text" v-model="logentry.locator" label="LOC"></tuxlog-input>
              </b-col>
              <b-col>
                <tuxlog-input id="qth" type="text" v-model="logentry.qth" label="QTH"></tuxlog-input>
            </b-col>
            <b-col>
                  <tuxlog-input id="country" type="text" v-model="logentry.country" label="Country"></tuxlog-input>
            </b-col>
          </b-row>
      
          <b-row class="my-1" key="type">
            <b-col>
              <tuxlog-input id="name" type="text" v-model="logentry.name" label="Name"></tuxlog-input>
            </b-col>
            <b-col>
              <tuxlog-input id="comment" type="text" v-model="logentry.comment" label="Comment"></tuxlog-input>
            </b-col>
          </b-row>                
      
          <b-row class="my-1" key="type">
              <b-col>
                  <tuxlog-input id="itu_prefix" type="text" v-model="logentry.itu_prefix" label="Prefix"></tuxlog-input>
                </b-col>
              <b-col>
                  <tuxlog-input id="dxcc" type="text" v-model="logentry.dxcc" label="DXCC"></tuxlog-input>
                </b-col>
              <b-col>
                  <tuxlog-input id="cq" type="text" v-model="logentry.cq" label="CQ"></tuxlog-input>
                </b-col>
              <b-col>
                  <tuxlog-input id="itu" type="text" v-model="logentry.itu" label="ITU"></tuxlog-input>
                </b-col>
              <b-col>
                  <tuxlog-input id="dok" type="text" v-model="logentry.dok" label="DOK"></tuxlog-input>
                </b-col>
            </b-row>
      
      
            <b-row class="my-1" key="type">
              <b-col>
                <tuxlog-input id="viacall" type="text" v-model="logentry.viacall" label="via"></tuxlog-input>
              </b-col>
              <b-col>
                <tuxlog-option id="qsl_shipmentmode" v-bind:values="qslshipmentmodes" v-if="logentry.qsl_shipmentmode" v-model="logentry.qsl_shipmentmode.id" label="Shipment"></tuxlog-option>
              </b-col>
          </b-row>
      
      
          <b-row class="my-1" key="type" style="width: 50%;">
              <b-col>
                  <tuxlog-checkbox id="qslsend" v-model="logentry.qslsend" label="Send"></tuxlog-checkbox>
                </b-col>
              <b-col>
                  <tuxlog-checkbox id="qslrecv" v-model="logentry.qslrecv" label="Recv"></tuxlog-checkbox>
                </b-col>
          </b-row>                  
      
          <b-row class="my-1" key="type" style="width: 50%;">
            <b-col>
              <b-button v-on:click="clearForm()" size="sm">Neu</b-button>
              <b-button v-on:click="save()" size="sm">Speichern</b-button>
      
      
              <b-alert
              :show="alert.dismissCountDown"
              dismissible
              v-bind:variant="alert.type"
              @dismissed="alert.dismissCountDown=0"
              @dismiss-count-down="countDownChanged">
              <p>{% raw %}{{ alert.message }}{% endraw %}</p>
              </b-alert>
        
              </b-col>
            </b-row>        
          </b-container></b-card>
      


  </b-col>
</b-row>
</b-container>


  </div>
</div>

<script>
Vue.component('tuxlog-input', {
  props: ["label","value", "type", "id", "readonly"],
  template: '<div style="margin-top:0px;"><label style="display: block;">{% raw %}{{ label }}{% endraw %}\
  <b-form-input v-bind:readonly="readonly" v-bind:id="id" v-bind:type="type" v-model="value" size="sm" @input="handleInput" @change="onchange_value"></b-form-input>\
  </label>\
  </div>',

  methods: {
    onchange_value(e) {
      this.$emit('onchange_value', e)
    },
    handleInput (e) {
      this.$emit('input', this.value)
    }
  }
});

Vue.component('tuxlog-option', {
  props: ["values", "value", "label", "id", "readonly"],
  template: '<div><label for="logbook_id" size="sm">{% raw %}{{ label }}{% endraw %}\
<b-form-select v-bind:disabled="readonly" v-bind:id="id" v-model="value" class="mb-1" size="sm" @input="handleInput" @change="onchange_value">\
<option v-for="n in values" :value="n.id">{% raw %}{{ n.description }}{% endraw %}</option>\
</b-form-select></label></div>',

methods: {
    onchange_value(e) {
      this.$emit('onchange_value', e)
    },
    handleInput (e) {
      this.$emit('input', this.value)
    }
  }
});

Vue.component('tuxlog-checkbox', {
  props: ["value", "label", "id"],
  template: '<div><label for="logbook_id" size="sm">{% raw %}{{ label }}{% endraw %}\
  <b-form-checkbox v-bind:id="id" unchecked-value="0" value="1" v-model="value" size="sm"></b-form-checkbox>\
</label></div>',

methods: {
    handleInput (e) {
      this.$emit('input', this.value)
    }
  }
});


vue = new Vue({
  el: '#app',
  data () {
    return {
      loaddata: false,
      alert: {message: null, type: 'warning',dismissSecs: 10,dismissCountDown: 0,showDismissibleAlert: false},
      logentry: {},
      rigs: [],
      modes: [],
      logbooks: [],
      qslshipmentmodes: [],
      alert: {message: null, type: 'warning',dismissSecs: 10,dismissCountDown: 0,showDismissibleAlert: false}, 
      auth: {username: 'guest', password:null},
      history: [],
      historyfields: ["id", "yourcall", "start_utc","logdate_utc","frequency","rxrst"]
    }
  },
  mounted () {
    var recordId=0;
    para= new URLSearchParams(window.location.search);
    if(para.has('recordid')) recordId=para.get('recordid');
    this.initEntry(recordId);

    axios.get('/api/v1.0/tuxlog/LogLogbooks').then( (response) => {
      this.logbooks=response.data;
    }
    ).catch( (response) => { alert('Error loading lookbooks') } )

    axios.get('/api/v1.0/tuxlog/LogRigs').then( (response) => {
      this.rigs=response.data;
    }
    ).catch( (response) => { alert('Error loading rigs') } )

    axios.get('/api/v1.0/tuxlog/LogModes').then( (response) => {
      this.modes=response.data;
    }
    ).catch( (response) => { alert('Error loading modes') } )

    axios.get('/api/v1.0/tuxlog/LogQslshipmentmodes').then( (response) => {
      this.qslshipmentmodes=response.data;
    }
    ).catch( (response) => { alert('Error loading qslshipmentmodes') } )
    
    this.loadHistory();
  },
   filters:{
      getconfigkey: function(value,key){
      	if(value==null) return null;
          return value[key];
        }
    },
  methods: {
    onclick_history: function(record, index) {
      console.log('selected record => '+record);
      this.initEntry(record.id);
    },
    loadHistory: function() {
        axios.get('/api/v1.0/tuxlog/LogLogs?order=id desc&pagesize=10').then( (response) => {
        this.history=response.data;
      }).catch((response)=> {alert('Fehler')})
    },
     makeToast(append = false, text) {
        this.toastCount++
        this.$bvToast.toast(text, {
          title: 'tuxlog',
          autoHideDelay: 5000,
          appendToast: append
        })
      },
    yourcall_onchange: function(event) {
      this.makeToast(true, 'Reading from callbook...')
      //console.log(this.logentry.name)
      axios.get('/api/v1.0/callbook/hamdb/'+event).then((response)=>{
        this.logentry.name=response.data.haminfo.name
        this.logentry.country=response.data.haminfo.country
        this.logentry.qth=response.data.haminfo.qth
        this.logentry.locator=response.data.haminfo.locator
        this.$forceUpdate();
    }).catch((response) => {
      this.logentry.name=""
      this.logentry.country=""
      this.logentry.qth=""
      this.logentry.locator=""
      this.$forceUpdate();
      this.showAlert('Error loading haminfo => '+response, "warning")
    })
    },
    initEntry: function (id) {
      this.loaddata=true;
      if (id==0) {
        this.clearForm();
      } else {axios.get('/api/v1.0/tuxlog/LogLogs/'+id).then( (response) => {
          this.logentry=response.data;
          console.log(this.logentry);
          this.loaddata=false;
        }).catch( (response) => { alert('Fehler'); this.clearForm(); } )
      }
    },
    clearForm: function() {
      now = new Date();
      utcTime = now.getUTCHours()+":"+now.getUTCMinutes();
      this.loadHistory();
      this.loaddata=false;
      
      this.logentry={"rig": {"id": "ic735"}, "mode": {"id": "SSTV"}, 
      "logbook": {"id":"dk9mbs"}, "qsl_shipmentmode": {"id":"bureau"}, "logdate_utc": new Date().toISOString().slice(0,10), 
      "start_utc": utcTime, "qslsend":0, "qslrecv":0};
    },
    save: function() {
      axios.post('/api/v1.0/tuxlog/LogLogs', this.logentry).then((response) => {
        console.log(this.logentry);
        this.clearForm();
        this.makeToast(true, 'New entry saved!');
      }).catch((response)=>{alert('Fehler'); this.loaddata=false; })
    },
    countDownChanged: function(dismissCountDown) {
      this.alert.dismissCountDown = dismissCountDown
    },
    showAlert: function(message, type='warning') {
      this.alert.message=message;
      this.alert.type=type;
      this.alert.dismissCountDown = this.alert.dismissSecs;
    }

  }
})




/*listener=new ServerMessageListener();

foo=new class extends BaseListener { execute(){}; }
foo.setVue(vue);

listener.addListener(foo);
listener.addListener( new class { execute() {} }    );
listener.connect();

listener.execListener();
*/

</script>

</body>
</html>
